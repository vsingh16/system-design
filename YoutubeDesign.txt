Requirements:
1) User should be able to upload video.
2) User should be able to view video.
3) User can perform search.
4) User should be able to view/add comment on video.
5) Video view/like/dislike counter.

Reference : https://www.youtube.com/watch?v=lYoSd2WCJTo

API Design:
Post: uploadVideo(video title, description, tags[], category id, default language, recording details, video content)
Get: searchVideo(search_query, current page count, total page )
Get: streamVideo(video id, codec, resolution) : codec and resoultion will be generated on the basis of client device.User can also select resolution supported by his device.

Low Level Design:
Client-----upload----------> WEb Server-----> APP Server(In case of upload, video content will be placed into queue.)---->queue------->Encoder--------> Save content in S3       
      -----search------->                             |                                                                                       --------> Save Thumbnail in S3
      -----streamVideo------->                        |  
                                                      |
                      (CDN )                          User DB, Metada DB    

Upload Flow:
CLient ----->LB ------>Asset OnBoarding Service------> S3(Raw Video)-----> Kafka----------> On Content Processing Completion-------> Cassandra DB
                                                                              |
Content Processing Service<---------------------------------------------------|
                                                                              ^
[File Chunker, Content Filtering, Tagging, Transcoding, CDN]------------------|

Client will invoke upload API call.
Asset onbaording service will save video in S3 and an event to kafka(Video uploaded. Content for processing)
Content Processing Service will listen to this event and will start video processing.
File Chunker: Video is very huge, so it is divided into smaller chunks.
Content Filtering:There may be some checks like piracy or nudity or absurd langauge.
Tagging: There may be multiple tags in videos, so top relevent tags are identified and thumbnails are generadted.
Transcoding: Videos are converted into different formats and pxiels to serve multiple client devices.
CDN: These smaller chunks are sent to CDN where it get uploaded.
During all these process, different events are generated and sent to kafka, relevant microsevrice listening to these events will persist information in Cassandra DB.

User Login Flow:
            Kafka------------> Analytics Service---> Spark Jobs---> Hadoop Cluster
               ^   
               |   
Client -> User Service -> MY SQL DB-> Redis cache
User will login via User Service(LDAP).
User Service will have user db, MYSQL, it will also cache some info in Redis.
This will send lot of information related to user on kafka, where we have Analytics service listening.
SPark jobs processing and storing infor in Hadoop.
Recommendation Engine. This also used to save information about client devices , so that if there are two many devices associated 
with a user, we can track account sharing.

Home Screen Flow:

             
Client -> Home Page API
             ^
             |
           Analytics Service, Cassandra
           
Clinet -> Home SCreen -> Search(Cassandra)           

The content of home screen is served by Home Screen API.
Results are based on Analytics service and thumnbnails and video information we store in cassandra DB.

Search results query over cache and cassandra db.
This will also give us information about CDN where video is located.
           
            
            


Stream Flow: Request will go to near by CDN to fullfill video play request. 
CDN(Content Delivery Network): This is set of servers placed across the globe , so that communication cost(latency) b/w client and server can be reduced.

Search Flow: Metadata DB will server this request. Thumbnails are returned in response.

DB Schema:
Video Table:
(id, title, descrption, size, thumbnail, uploaded by user, likes, dislikes, total views)
Comment Table:
(id, video id, user id, comment)
User Table:
(id, Name, Email, Address)
