Requirement: We need to design a Tiny URL service which will support two functionalities.
1. Create a tiny URL for long URL.
2. Get Long URL for tiny URL.
3. Length of tiny URL is 7.

Referrences: 
https://www.youtube.com/watch?v=JQDHz72OA3c
https://www.youtube.com/watch?v=fMZMm_0ZhK4

API Design: 
String createTinyURL(String longURL)
String getLongURL(String tinyURL)

DB Schema:
id,tiny URL(Primar Key), Long URL, Timestamp

Tiny URL Generation:
Tiny URL will consist of (a-z,A-Z,0-9). 62 characters, 62^7 combinations.
i.e our service can service 62^7 unique tiny URLs.
Approach 1: We can generate random no and then apply Base 62 i.e no%62 and n = n/62 (in this way we will get a no b/w 0-61 which we can map to characters(a-z,A-Z,0-9))
 
 User----> TINY URL Generation Service---> DB
 
 Case1: If two users hits tiny url creation at same time, 
 REQ1(Long URL), -> random 1 -> tiny URL 1 
 REQ2(Same Long URL), -> random 2 -> tiny URL 2
 In this case , two entries will be made in db . This is fine but we see that multiple tiny urls may get allocated to long URL, duplicacy.
 
 Case2: If two users hits tiny url creation at same time, 
 REQ1(Long URL 1), -> Same random  -> tiny URL 
 REQ2(Long URL 2), -> Same random  -> same tiny URL 
 In this case , since we have Primary key in table on tiny url, one request will be succeed and 2 will fail.
 To address this, we can apply retrey that 2nd req will again generate random and repeat the process until it gets unique URL.
 Con: So many repative cycle.
 
 Approach 2: 
Rather than using random number, we will use MD5 to generate unqiue hash and will take its left 43 bits and apply base 62.
Left 43 bits because we need only 7 len tiny url 43 bits = 7^62
Point to note that MD5 will give unique same string for same input.
Case1: If two users hits tiny url creation at same time, 

REQ1(Long URL), -> same MD5 -> tiny URL  
REQ2(Same Long URL), -> same MD5 -> same tiny URL 
In this case , since we have Primary key in table on tiny url, one request will be succeed and 2 will fail and we no longer need to retry.

 Case2: If two users hits tiny url creation at same time, 
 REQ1(Long URL 1), -> MD5  -> tiny URL 
 REQ2(Long URL 2), -> MD5(But since we consider only left 43 bits, it may be same)  -> same tiny URL 
 In this case , since we have Primary key in table on tiny url, one request will be succeed and 2 will fail.
 and we have to retry until it succeeds.
 
 Approach3: 
 We take counter staring from 0 to 7^62.
 user -> Load Balancer -----------> App1 
                       -----------> App2
Counter Service(0 to 7^62)--------> App3
Case1: If two users hits tiny url creation at same time, 

REQ1(Long URL), -> counter 1 -> tiny URL 1 
REQ2(Same Long URL), -> Counter 2 -> tiny URL 2
In this case , since we have Primary key in table on tiny url, one request will be succeed and 2 will fail and we no longer need to retry.

 Case2: If two users hits tiny url creation at same time, 
 REQ1(Long URL 1), -> counter 1 -> tiny URL 1
 REQ2(Long URL 2), -> counter 2  -> tiny URL 2
 Since counter service returns unique counter every time, no collision.
 Con: SInce we have single counter service , its single poitn of failure.
 
Approach 3: Distributed Tiny URl
We can have zookeeper service, which will register all application service instances.
And zookeeper can also store configs, it maintains ranges(0-10000,10001-2000) etc.
               
               Zookeeper(0-10000,10001-2000)----
                                               |
User 1 ------> Load Balancer----> App 1, App 2, APP3
               |                    |cache----- DB(No SQL/RDDMS)
user 2-------- |

 



 
