Requirements:
User select city, list all running shows
User select show, list seats and their status
User book seats, block them for 5 mins
If payment fails, unblock seats.

API:
Get: list/shows/{city}
Get: list/seats/{showid}
POST: book/seats Request Body : [Lis of seatIds]

                                                                  DB Design
User(id,name,mobile, email)     
Show(id,movie id, theatre id, date time)
Theatre(id, name, address, city)
Movie(id,name)
Seat(id, number, price, category)
SeatBooking(id, seat id, show id, Occupied Status)

5 min Feature: Rather than directly updating seat status in DB, we can hold it in cache, if payment success write it in DB else evict from cache.

                                                                  End To End Flow
Reference Link : https://www.youtube.com/watch?v=lBAwJgoO3Ek
In Real world scenario, theatres like PVR maintain their own APIS to manage seats.
Systems like BMS invoke their APIS.
                              
                              Logstash--> Elastic Search---> Kibana Dashboard
                              | 
                              |    
Clients -> Load Balancer -> BMS App Server(Spring+Java) -> Cache -> RDMBS(Transaction Info : SQL), No SQL(Movie info, ratings, user comments)
                              |             |         | -> After success payments queue ---> Send email and Whats app Service
                              |             | 
       Payment Gateway Services            Spark Jobs, Hadoop: ML recommendations
